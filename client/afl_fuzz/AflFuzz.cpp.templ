//
// Copyright 2024 - 2024 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "AflFuzz.h"

#include "Generator.h"

#include "##NAME##client.h"

#include "cc_mqtt311/Message.h"
#include "cc_mqtt311/frame/Frame.h"

#ifdef WIN32
#include <io.h>
#else // #ifdef WIN32
#include <unistd.h>
#endif // #ifdef WIN32

#include <algorithm>
#include <cassert>
#include <cstdlib>

namespace cc_mqtt311_client_afl_fuzz
{

namespace 
{

const std::size_t BufSize = 1024000;

} // namespace 
    

class AflFuzzImpl
{
public:
    explicit AflFuzzImpl(const ProgramOptions& opts, Logger& logger) : 
        m_opts(opts),
        m_logger(logger),
        m_client(cc_mqtt311_##NAME##client_alloc()),
        m_verbose(opts.verbose())
    {
    }

    bool init()
    {
        if (!createGeneratorIfNeeded()) {
            return false;
        }

        auto subTopics = m_opts.subTopics();
        std::transform(
            subTopics.begin(), subTopics.end(), std::back_inserter(m_state.m_subs),
            [](auto& topicsList)
            {
                SubscribeInfo info;
                info.m_topics = topicsList;
                return info;
            });

        cc_mqtt311_##NAME##client_set_next_tick_program_callback(m_client.get(), &AflFuzzImpl::nextTickProgramCb, this);
        cc_mqtt311_##NAME##client_set_cancel_next_tick_wait_callback(m_client.get(), &AflFuzzImpl::cancelNextTickWaitCb, this);
        cc_mqtt311_##NAME##client_set_send_output_data_callback(m_client.get(), &AflFuzzImpl::sendOutputDataCb, this);
        cc_mqtt311_##NAME##client_set_broker_disconnect_report_callback(m_client.get(), &AflFuzzImpl::brokerDisconnectReportCb, this);
        cc_mqtt311_##NAME##client_set_message_received_report_callback(m_client.get(), &AflFuzzImpl::messageReceivedReportCb, this);
        cc_mqtt311_##NAME##client_set_error_log_callback(m_client.get(), &AflFuzzImpl::errorLogCb, this);
        return true;
    }

    void run()
    {
#ifndef WIN32        
        sync();
#endif        

        std::uint8_t buf[BufSize] = {0};
        while (true) {
            m_logger.flush();

            if (cc_mqtt311_##NAME##client_is_network_disconnected(m_client.get())) {
                infoLog() << "Terminating execution loop when network is disconnected" << std::endl;
                break;
            }

            if (m_state.m_reinitRequired) {
                doReinit();
            }   

            do {
                if (m_state.m_connectRequired) {
                    doConnect();
                    break;
                }

                if (!cc_mqtt311_##NAME##client_is_connected(m_client.get())) {
                    infoLog() << "Not connected yet..." << std::endl;
                    assert(!m_state.m_connected);
                    break;
                }

                assert(m_state.m_connected);

                doSubscribeIfNeeded();
                doUnsubscribeIfNeeded();
                doDisconnectIfNeeded();

            } while (false);      
        

            int len = 0;
            bool noMoreRead = true;
            if (!m_generator) {
#ifdef WIN32
                len = _read(0, buf, BufSize);
#else // #ifdef WIN32
                len = static_cast<decltype(len)>(read(0, buf, BufSize));
#endif // #ifdef WIN32                
                noMoreRead = (len <= 0);
                len = std::max(len, static_cast<decltype(len)>(0));
                infoLog() << "Read " << len << " bytes\n";

                if (m_verbose) {
                    auto& out = debugLog();
                    out << "Read bytes: " << std::hex;
                    std::copy_n(buf, len, std::ostream_iterator<unsigned>(out, " "));
                    out << std::dec << std::endl;
                }
            }

            auto dataPtr = &buf[0];
            auto dataLen = static_cast<std::size_t>(len);
            bool hasPrevData = false;
            if (!m_inData.empty()) {
                m_inData.reserve(m_inData.size() + dataLen);
                m_inData.insert(m_inData.end(), dataPtr, dataPtr + dataLen);
                static const auto MaxLen = std::numeric_limits<unsigned>::max();

                if (MaxLen < m_inData.size()) {
                    m_inData.erase(m_inData.begin(), m_inData.begin() + (m_inData.size() - MaxLen));
                }

                dataPtr = m_inData.data();
                dataLen = m_inData.size();
                hasPrevData = true;
            }

            using Interface = cc_mqtt311::Message<>;
            using IdAndFlagsField = cc_mqtt311::frame::Frame<Interface>::Layer_idAndFlags::Field;
            using SizeField = cc_mqtt311::frame::Frame<Interface>::Layer_size::Field;

            static constexpr auto MinLen = IdAndFlagsField::minLength() + SizeField::minLength();
            if (dataLen < MinLen) {
                if (!noMoreRead) {
                    continue;
                }

                if (!cc_mqtt311_##NAME##client_is_network_disconnected(m_client.get())) {
                    infoLog() << "Insufficient data in buffer (" << dataLen << "), reporting network disconnected..." << std::endl;
                    cc_mqtt311_##NAME##client_notify_network_disconnected(m_client.get());
                    brokerDisconnectReportCb(this, CC_Mqtt311BrokerDisconnectReason_ValuesLimit);
                    continue;
                }

                infoLog() << "Insufficient data in buffer (" << dataLen << "), stopping execution loop" << std::endl;
                break;
            }

            auto iter = dataPtr;
            std::advance(iter, IdAndFlagsField::minLength());

            auto processLen = dataLen;
            SizeField sizeField;
            auto es = sizeField.read(iter, dataLen - IdAndFlagsField::minLength());
            if (es == comms::ErrorStatus::Success) {
                auto msgLen = IdAndFlagsField::minLength() + sizeField.length() + sizeField.getValue();
                processLen = std::min(dataLen, msgLen);
            }

            auto consumed = 0U;
            if (!cc_mqtt311_##NAME##client_is_network_disconnected(m_client.get())) {
                infoLog() << "Processing " << processLen << " out of " << dataLen << " bytes...\n";
                consumed = cc_mqtt311_##NAME##client_process_data(m_client.get(), dataPtr, static_cast<unsigned>(processLen));
                infoLog() << "Consumed: " << consumed << '\n';
            }
            else {
                infoLog() << "Network is disconnected, not consuming any data" << '\n';
            }

            if ((consumed == 0U) && noMoreRead) {
                if (!cc_mqtt311_##NAME##client_is_network_disconnected(m_client.get())) {
                    infoLog() << "No data consumed and no more input, reporting network disconnected..." << std::endl;
                    cc_mqtt311_##NAME##client_notify_network_disconnected(m_client.get());
                    brokerDisconnectReportCb(this, CC_Mqtt311BrokerDisconnectReason_ValuesLimit);
                    continue;
                }

                infoLog() << "No data consumed and no more input, stopping execution loop\n";
                break;
            }

            if ((dataLen <= consumed) && (!hasPrevData)) {
                infoLog() << "Consumed all available bytes\n";
                m_inData.clear();
                continue;
            }

            if (!hasPrevData) {
                m_inData.assign(dataPtr + consumed, dataPtr + dataLen);
                infoLog() << "Keeping " << m_inData.size() << " bytes for the next iteration\n";
                continue;
            }

            m_inData.erase(m_inData.begin(), m_inData.begin() + consumed);
            infoLog() << "Keeping " << m_inData.size() << " bytes for the next iteration\n";        
        }

        m_client.reset();

        infoLog() << "------------------------------------------------" << std::endl;
    }

private:
    struct ClientDeleter
    {
        void operator()(CC_Mqtt311Client* ptr)
        {
            cc_mqtt311_##NAME##client_free(ptr);
        }
    }; 

    using ClientPtr = std::unique_ptr<CC_Mqtt311Client, ClientDeleter>;

    struct SubscribeInfo
    {
        std::vector<std::string> m_topics;
        CC_Mqtt311SubscribeHandle m_subHandle = nullptr;
        CC_Mqtt311UnsubscribeHandle m_unsubHandle = nullptr;
        bool m_acked = false;
        bool m_unsubscribed = false;
    };

    struct State
    {
        std::vector<SubscribeInfo> m_subs;
        unsigned m_nextTickDuration = 0U;
        unsigned m_publishCount = 0U;
        bool m_reinitRequired = true;
        bool m_connectRequired = true;
        bool m_connected = false;
        bool m_firstConnect = true;
        bool m_disconnected = false;
    };

    std::ostream& debugLog()
    {
        return m_logger.debugLog();
    }

    std::ostream& infoLog()
    {
        return m_logger.infoLog();
    }

    std::ostream& errorLog()
    {
        return m_logger.errorLog();
    }

    void doReinit()
    {
        infoLog() << "(Re)Initializing..." << std::endl;
        m_state.m_reinitRequired = false;
        m_state.m_disconnected = false;
        m_state.m_publishCount = 0U;
        m_state.m_connected = false;
    }

    void doConnect()
    {
        m_state.m_connected = false;
        
        infoLog() << "Connecting..." << std::endl;
        CC_Mqtt311ErrorCode ec = CC_Mqtt311ErrorCode_ValuesLimit;
        auto connect = cc_mqtt311_##NAME##client_connect_prepare(m_client.get(), &ec);
        assert(connect != nullptr);
        assert(ec == CC_Mqtt311ErrorCode_Success);
        if (connect == nullptr) {
            errorLog() << "Unexpected failure in connect allocation\n";
            exit(-1);
        }

        CC_Mqtt311ConnectConfig config;
        cc_mqtt311_##NAME##client_connect_init_config(&config);
        config.m_cleanSession = m_state.m_firstConnect || m_opts.clientId().empty();

        auto clientId = m_opts.clientId();
        if (!clientId.empty()) {
            config.m_clientId = clientId.c_str();
        }
        
        ec = cc_mqtt311_##NAME##client_connect_config(connect, &config);
        assert(ec == CC_Mqtt311ErrorCode_Success);
        if (ec != CC_Mqtt311ErrorCode_Success) {
            errorLog() << "Unexpected failure in connect basic configuration\n";
            exit(-1);
        }   

        ec = cc_mqtt311_##NAME##client_connect_send(connect, &AflFuzzImpl::connectCompleteCb, this);
        assert(ec == CC_Mqtt311ErrorCode_Success);
        if (ec != CC_Mqtt311ErrorCode_Success) {
            errorLog() << "Unexpected failure in sending connect request\n";
            exit(-1);
        }   

        m_state.m_connectRequired = false;
    }

    void doSubscribeIfNeeded() {
        for (auto& subInfo : m_state.m_subs) {
            if ((subInfo.m_subHandle != nullptr) || (subInfo.m_acked)) {
                // Request is sent
                continue;
            }

            infoLog() << "Attempting subscribe\n";

            CC_Mqtt311ErrorCode ec = CC_Mqtt311ErrorCode_ValuesLimit;
            subInfo.m_subHandle = cc_mqtt311_##NAME##client_subscribe_prepare(m_client.get(), &ec);
            
            if (subInfo.m_subHandle == nullptr) {
                errorLog() << "Unexpected failure in subscribe allocation\n";
                subInfo.m_acked = true;
                continue;
            }     

            assert(ec == CC_Mqtt311ErrorCode_Success);

            for (auto& t : subInfo.m_topics) {
                assert(!t.empty());
                infoLog() << "Adding topic " << t << "\n";
                CC_Mqtt311SubscribeTopicConfig config;
                cc_mqtt311_##NAME##client_subscribe_init_config_topic(&config);
                config.m_topic = t.c_str();

                while (true) {
                    ec = cc_mqtt311_##NAME##client_subscribe_config_topic(subInfo.m_subHandle, &config);
                    if (ec == CC_Mqtt311ErrorCode_Success) {
                        break;
                    }

                    if (config.m_maxQos > CC_Mqtt311QoS_AtMostOnceDelivery) {
                        config.m_maxQos = 
                            static_cast<decltype(config.m_maxQos)>(
                                static_cast<unsigned>(config.m_maxQos) - 1U);
                        continue;
                    }

                    auto whildcardPos = std::string(config.m_topic).find_first_of("#+");
                    if (whildcardPos != std::string::npos) {
                        config.m_topic = "some/topic";
                        config.m_maxQos = CC_Mqtt311QoS_ExactlyOnceDelivery;
                        infoLog() << "Changing subscribe topic to " << config.m_topic << std::endl;
                        continue;
                    }

                    errorLog() << "Unexpected failure in topic subscribe configuration\n";
                    break;
                }
            }

            ec = cc_mqtt311_##NAME##client_subscribe_send(subInfo.m_subHandle, &AflFuzzImpl::subscribeCompleteCb, this);
            if (ec != CC_Mqtt311ErrorCode_Success) {
                errorLog() << "Unexpected failure in sending subscribe request";
                subInfo.m_subHandle = nullptr;
                subInfo.m_acked = true;
            }             
        }
    }

    void doUnsubscribeIfNeeded() {

        if (m_state.m_publishCount < m_opts.minPubCount()) {
            return;
        }

        bool subsComplete = 
            std::all_of(
                m_state.m_subs.begin(), m_state.m_subs.end(),
                [](auto& subInfo)
                {
                    return subInfo.m_acked;
                });

        if (!subsComplete) {
            return;
        }

        for (auto& subInfo : m_state.m_subs) {
            if ((subInfo.m_unsubHandle != nullptr) || (subInfo.m_unsubscribed)) {
                // Request is sent / completed
                continue;
            }

            infoLog() << "Attempting unsubscribe\n";

            CC_Mqtt311ErrorCode ec = CC_Mqtt311ErrorCode_ValuesLimit;
            subInfo.m_unsubHandle = cc_mqtt311_##NAME##client_unsubscribe_prepare(m_client.get(), &ec);
            if (subInfo.m_unsubHandle == nullptr) {
                errorLog() << "Unexpected failure in unsubscribe allocation\n";
                subInfo.m_unsubscribed = true;
                continue;
            }     

            assert(ec == CC_Mqtt311ErrorCode_Success);

            for (auto& t : subInfo.m_topics) {
                assert(!t.empty());
                infoLog() << "Adding topic " << t << "\n";
                CC_Mqtt311UnsubscribeTopicConfig config;
                cc_mqtt311_##NAME##client_unsubscribe_init_config_topic(&config);
                config.m_topic = t.c_str();

                while (true) {
                    ec = cc_mqtt311_##NAME##client_unsubscribe_config_topic(subInfo.m_unsubHandle, &config);
                    if (ec == CC_Mqtt311ErrorCode_Success) {
                        break;
                    }

                    if (!cc_mqtt311_##NAME##client_get_verify_outgoing_topic_enabled(m_client.get())) {
                        errorLog() << "Unexpected failure in configuring unsubscribe topic\n";
                        cc_mqtt311_##NAME##client_unsubscribe_cancel(subInfo.m_unsubHandle);
                        break;
                    }

                    cc_mqtt311_##NAME##client_set_verify_outgoing_topic_enabled(m_client.get(), false);
                }
            }

            ec = cc_mqtt311_##NAME##client_unsubscribe_send(subInfo.m_unsubHandle, &AflFuzzImpl::unsubscribeCompleteCb, this);
            if (ec != CC_Mqtt311ErrorCode_Success) {
                errorLog() << "Unexpected failure in sending unsubscribe request";
                subInfo.m_unsubHandle = nullptr;
                subInfo.m_unsubscribed = true;
            }             
        }
    }

    void doDisconnectIfNeeded() 
    {
        if (m_state.m_disconnected) {
            return;
        }

        bool unsubsComplete = 
            std::all_of(
                m_state.m_subs.begin(), m_state.m_subs.end(),
                [](auto& subInfo)
                {
                    return subInfo.m_unsubscribed;
                });

        if (!unsubsComplete) {
            return;
        }

        m_state.m_disconnected = true;
        m_state.m_reinitRequired = true;
        m_state.m_connected = false;

        auto ec = cc_mqtt311_##NAME##client_disconnect(m_client.get());
        if (ec != CC_Mqtt311ErrorCode_Success) {
            errorLog() << "Failed to send disconnect\n";
            return;
        }     
    }    

    bool createGeneratorIfNeeded()
    {
        auto inputFile = m_opts.genInputFile();
        if (inputFile.empty()) {
            return true;
        }        

        m_generator = std::make_unique<Generator>(m_logger, m_opts.minPubCount());
        if (!m_generator->prepare(inputFile)) {
            return false;
        }

        m_generator->setDataReportCb(
            [this](const std::uint8_t* buf, std::size_t bufLen)
            {
                m_inData.reserve(m_inData.size() + bufLen);
                m_inData.insert(m_inData.end(), buf, buf + bufLen);
                infoLog() << "Appended " << bufLen << " bytes to buffer, totaling " << m_inData.size() << " bytes\n";
            });

        return true;
    }

    static AflFuzzImpl* asThis(void* data)
    {
        return reinterpret_cast<AflFuzzImpl*>(data);
    }

    static void nextTickProgramCb(void* data, unsigned duration)
    {
        asThis(data)->m_state.m_nextTickDuration = duration;
    }

    static unsigned cancelNextTickWaitCb(void* data)
    {
        auto diff = std::min(asThis(data)->m_state.m_nextTickDuration, 1U);
        asThis(data)->m_state.m_nextTickDuration -= diff;
        return diff;
    }

    static void sendOutputDataCb(void* data, const unsigned char* buf, unsigned bufLen)
    {
        auto& logger = asThis(data)->m_logger;
        logger.infoLog() << "Sending " << bufLen << " bytes\n";    
        if (asThis(data)->m_verbose) {
            auto& out = logger.debugLog();
            out << "Sent bytes: " << std::hex;
            std::copy_n(buf, bufLen, std::ostream_iterator<unsigned>(out, " "));
            out << std::dec << '\n';
        }

        auto& generator = asThis(data)->m_generator;
        if (generator) {
            generator->processData(buf, bufLen);
        }
    }

    static void brokerDisconnectReportCb(void* data, [[maybe_unused]] CC_Mqtt311BrokerDisconnectReason reason)
    {
        asThis(data)->m_logger.infoLog() << "Broker disconnected\n";
        auto& state = asThis(data)->m_state;
        state.m_disconnected = true;
        state.m_connected = false;
        state.m_reinitRequired = true;
        state.m_connectRequired = true;
    }

    static void messageReceivedReportCb(void* data, const CC_Mqtt311MessageInfo* info)
    {
        auto* thisPtr = asThis(data);
        thisPtr->m_logger.infoLog() << "Message Received!\n";

        assert(info != nullptr);

        CC_Mqtt311ErrorCode ec = CC_Mqtt311ErrorCode_ValuesLimit;
        auto* publish = ::cc_mqtt311_##NAME##client_publish_prepare(thisPtr->m_client.get(), &ec);
        assert(ec == CC_Mqtt311ErrorCode_Success);
        if (publish == nullptr) {
            thisPtr->errorLog() << "Unexpected failure in publish allocation\n";
            return;
        }        

        CC_Mqtt311PublishConfig config;
        ::cc_mqtt311_##NAME##client_publish_init_config(&config);
        config.m_topic = info->m_topic;
        config.m_data = info->m_data;
        config.m_dataLen = info->m_dataLen;
        config.m_qos = info->m_qos;
        config.m_retain = info->m_retained;

        ec = cc_mqtt311_##NAME##client_publish_config(publish, &config);
        if (ec != CC_Mqtt311ErrorCode_Success) {
            thisPtr->errorLog() << "Unexpected failure in publish configuration\n";
            ::cc_mqtt311_##NAME##client_publish_cancel(publish);
            return;
        }    

        ec = cc_mqtt311_##NAME##client_publish_send(publish, &AflFuzzImpl::publishCompleteCb, thisPtr);
        if (ec != CC_Mqtt311ErrorCode_Success) {
            thisPtr->errorLog() << "Failure to publish message\n";
        }    
    }

    static void errorLogCb(void* data, const char* msg)
    {
        asThis(data)->m_logger.errorLog() << msg << '\n';
    }

    static void connectCompleteCb(void* data, CC_Mqtt311AsyncOpStatus status, const CC_Mqtt311ConnectResponse* response)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;

        do {
            if (status != CC_Mqtt311AsyncOpStatus_Complete) {
                break;
            }

            assert(response != nullptr);
            if (CC_Mqtt311ConnectReturnCode_Accepted != response->m_returnCode) {
                break;
            }

            thisPtr->infoLog() << "Connected" << std::endl;

            assert(cc_mqtt311_##NAME##client_is_connected(thisPtr->m_client.get()));

            if (!response->m_sessionPresent) {
                for (auto& subInfo : state.m_subs) {
                    assert(subInfo.m_subHandle == nullptr);
                    assert(subInfo.m_unsubHandle == nullptr);
                    subInfo.m_acked = false;
                    subInfo.m_unsubscribed = false;
                }
            }

            state.m_connectRequired = false;
            state.m_connected = true;
            state.m_disconnected = false;
            state.m_firstConnect = false;
            return;
        } while (false);

        state.m_connectRequired = true;
        state.m_connected = false;
        state.m_reinitRequired = true;    
    }  

    static void subscribeCompleteCb(void* data, CC_Mqtt311SubscribeHandle handle, CC_Mqtt311AsyncOpStatus status, const CC_Mqtt311SubscribeResponse* response)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;
        auto iter = 
            std::find_if(
                state.m_subs.begin(), state.m_subs.end(),
                [handle](auto& info)
                {
                    return info.m_subHandle == handle;
                });
        
        if (iter == state.m_subs.end()) {
            thisPtr->errorLog() << "Unexpected handle of the subscribe completion\n";
            exit(-1);
        }

        assert(!iter->m_acked);
        iter->m_subHandle = nullptr;
        if (status != CC_Mqtt311AsyncOpStatus_Complete) {
            thisPtr->errorLog() << "Subscribe operation is terminated\n";
            return;
        }

        assert(response != nullptr);
        bool allOk = true;
        for (auto idx = 0U; idx < response->m_returnCodesCount; ++idx) {
            if (CC_Mqtt311SubscribeReturnCode_SuccessQos2 < response->m_returnCodes[idx]) {
                thisPtr->errorLog() << "Subscribe rejected\n";
                allOk = false;
                break;
            }
        }
        
        if (allOk) {
            thisPtr->infoLog() << "The subscribe is properly acked\n";
        }
        iter->m_acked = allOk;
    }   

    static void publishCompleteCb(
        void* data, 
        [[maybe_unused]] CC_Mqtt311PublishHandle handle, 
        CC_Mqtt311AsyncOpStatus status)
    {
        auto* thisPtr = asThis(data);
        if (status != CC_Mqtt311AsyncOpStatus_Complete) {
            thisPtr->errorLog() << "Publish operation is terminated\n";
            return;
        }

        ++thisPtr->m_state.m_publishCount;
    }          

    static void unsubscribeCompleteCb(void* data, CC_Mqtt311UnsubscribeHandle handle, CC_Mqtt311AsyncOpStatus status)
    {
        auto* thisPtr = asThis(data);
        auto& state = thisPtr->m_state;
        auto iter = 
            std::find_if(
                state.m_subs.begin(), state.m_subs.end(),
                [handle](auto& info)
                {
                    return info.m_unsubHandle == handle;
                });
        
        if (iter == state.m_subs.end()) {
            thisPtr->errorLog() << "Unexpected handle of the unsubscribe completion\n";
            exit(-1);
        }

        assert(!iter->m_unsubscribed);
        iter->m_unsubHandle = nullptr;
        if (status != CC_Mqtt311AsyncOpStatus_Complete) {
            thisPtr->errorLog() << "Unsubscribe operation is terminated\n";
            return;
        }

        thisPtr->infoLog() << "The unsubscribe is properly acked\n";
        iter->m_unsubscribed = true;
    }      

    const ProgramOptions& m_opts;
    Logger& m_logger;
    ClientPtr m_client;
    GeneratorPtr m_generator;
    std::vector<std::uint8_t> m_inData;
    State m_state;
    bool m_verbose = false;
}; 

AflFuzz::AflFuzz(const ProgramOptions& opts, Logger& logger) : 
    m_impl(std::make_unique<AflFuzzImpl>(opts, logger))
{
}   

AflFuzz::~AflFuzz() = default;

bool AflFuzz::init()
{
    return m_impl->init();
}

void AflFuzz::run()
{
    m_impl->run();
}

} // namespace cc_mqtt311_client_afl_fuzz
