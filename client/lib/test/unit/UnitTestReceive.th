#include "UnitTestDefaultBase.h"
#include "UnitTestProtocolDefs.h"

#include <cxxtest/TestSuite.h>

class UnitTestReceive : public CxxTest::TestSuite, public UnitTestDefaultBase
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }
};

void UnitTestReceive::test1()
{
    // Simple receive of Qos0
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const bool Retain = true;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_retain().setBitValue_bit(Retain);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;

    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    TS_ASSERT_EQUALS(msgInfo.m_qos, CC_Mqtt311QoS_AtMostOnceDelivery);
    TS_ASSERT_EQUALS(msgInfo.m_retained, Retain);
    unitTestPopReceivedMessageInfo();
}

void UnitTestReceive::test2()
{
    // Simple receive of Qos1
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::AtLeastOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;

    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Puback);    
    auto* pubackMsg = dynamic_cast<UnitTestPubackMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubackMsg, nullptr);
    TS_ASSERT_EQUALS(pubackMsg->field_packetId().value(), PacketId);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    TS_ASSERT_EQUALS(msgInfo.m_qos, CC_Mqtt311QoS_AtLeastOnceDelivery);
    unitTestPopReceivedMessageInfo();
}

void UnitTestReceive::test3()
{
    // Simple receive of Qos2
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const bool Retain = true;
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_retain().setBitValue_bit(Retain);
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    TS_ASSERT_EQUALS(msgInfo.m_qos, CC_Mqtt311QoS_ExactlyOnceDelivery);
    TS_ASSERT_EQUALS(msgInfo.m_retained, Retain);
    unitTestPopReceivedMessageInfo();    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 1000);
    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    auto* pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
    TS_ASSERT_EQUALS(pubcompMsg->field_packetId().value(), PacketId);
}

void UnitTestReceive::test4()
{
    // Testing rejection of the allocated packet Id in Qos2 publish.

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    TS_ASSERT_EQUALS(msgInfo.m_qos, CC_Mqtt311QoS_ExactlyOnceDelivery);
    unitTestPopReceivedMessageInfo();

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 1000);

    // Second send of the same publish without dup flag

    unitTestReceiveMessage(client, publishMsg);
    TS_ASSERT(!unitTestHasSentMessage());
    TS_ASSERT(unitTestHasDisconnectInfo());
    auto& disconnnectInfo = unitTestDisconnectInfo();
    TS_ASSERT_EQUALS(disconnnectInfo.m_reason, CC_Mqtt311BrokerDisconnectReason_ProtocolError);
}

void UnitTestReceive::test5()
{
    // Testing invalid packet ID in PUBREL

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    TS_ASSERT_EQUALS(msgInfo.m_qos, CC_Mqtt311QoS_ExactlyOnceDelivery);
    unitTestPopReceivedMessageInfo();

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 1000);

    // Sending PUBREL with invalid packet id;
    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(publishMsg.field_packetId().field().value() + 1U);
    unitTestReceiveMessage(client, pubrelMsg);

    TS_ASSERT(!unitTestHasSentMessage()); // Should be ignored
    unitTestTick(client);
}

void UnitTestReceive::test6()
{
    // Testing network disconnection during reception of Qos2 message

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    const unsigned ResponseTimeout = 2000;
    apiSetDefaultResponseTimeout(client, ResponseTimeout);

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    unitTestPopReceivedMessageInfo();

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);

    auto* tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, ResponseTimeout);

    unitTestTick(client, 1000);
    apiNotifyNetworkDisconnected(client);

    auto connectConfig = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&connectConfig);
    connectConfig.m_clientId = __FUNCTION__;

    auto connectRespConfig = UnitTestConnectResponseConfig();
    connectRespConfig.m_sessionPresent = true;
    unitTestPerformConnect(client, &connectConfig, nullptr, &connectRespConfig);

    // Sending PUBREL 
    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    auto* pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
}


void UnitTestReceive::test7()
{
    // Testing reception of the DUP bit set when PUBREC is not received by the broker

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    TS_ASSERT_EQUALS(msgInfo.m_qos, CC_Mqtt311QoS_ExactlyOnceDelivery);
    unitTestPopReceivedMessageInfo();    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 1000);

    // Second send of the same publish with dup flag
    publishMsg.transportField_flags().field_dup().setBitValue_bit(true);

    unitTestReceiveMessage(client, publishMsg);

    // Duplicate message is not reported
    TS_ASSERT(!unitTestHasMessageRecieved());

    sentMsg = unitTestGetSentMessage();
    auto* pubrecMsg2 = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg2, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg2->field_packetId().value(), PacketId);

    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    auto* pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
    TS_ASSERT_EQUALS(pubcompMsg->field_packetId().value(), PacketId);

    TS_ASSERT(!unitTestHasMessageRecieved());
}


void UnitTestReceive::test8()
{
    // Testing reception of the DUP bit set right away (first PUBLISH was missed)

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.transportField_flags().field_dup().setBitValue_bit(true);
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    TS_ASSERT_EQUALS(msgInfo.m_qos, CC_Mqtt311QoS_ExactlyOnceDelivery);
    unitTestPopReceivedMessageInfo();    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 1000);

    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    auto* pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
    TS_ASSERT_EQUALS(pubcompMsg->field_packetId().value(), PacketId);
}

void UnitTestReceive::test9()
{
    // Testing reception of the unsolicited message

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "topic1/#");
    unitTestTick(client, 1000);

    const std::string Topic = "topic2";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::AtMostOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);    
    TS_ASSERT(!unitTestHasMessageRecieved()); // ignored
    TS_ASSERT(!unitTestHasSentMessage());

    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::AtLeastOnceDelivery;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);    
    TS_ASSERT(!unitTestHasMessageRecieved()); // ignored
}

void UnitTestReceive::test10()
{
    // Testing invalid PUBREL

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;

    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);   

    TS_ASSERT(unitTestHasMessageRecieved());
    unitTestPopReceivedMessageInfo();      

    TS_ASSERT(!unitTestHasMessageRecieved());
    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);    

    TS_ASSERT(!unitTestHasMessageRecieved());
    TS_ASSERT(unitTestHasDisconnectInfo());      
    auto& disconnectInfo = unitTestDisconnectInfo();
    TS_ASSERT_EQUALS(disconnectInfo.m_reason, CC_Mqtt311BrokerDisconnectReason_ProtocolError)       ;
}

void UnitTestReceive::test11()
{
    // Finish reception of the Qos2 message after unsubscribe

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;

    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    unitTestPopReceivedMessageInfo();  

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestPerformBasicSubscribe(client, "#");

    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    auto* pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
    TS_ASSERT_EQUALS(pubcompMsg->field_packetId().value(), PacketId);

    TS_ASSERT(!unitTestHasMessageRecieved());
}

void UnitTestReceive::test12()
{
    // Testing double receive of the same Qos1 message

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::AtLeastOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;

    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);  

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    TS_ASSERT_EQUALS(msgInfo.m_qos, CC_Mqtt311QoS_AtLeastOnceDelivery);
    unitTestPopReceivedMessageInfo();     

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Puback);    
    auto* pubackMsg = dynamic_cast<UnitTestPubackMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubackMsg, nullptr);
    TS_ASSERT_EQUALS(pubackMsg->field_packetId().value(), PacketId);

    // Assume PUBACK is not received by the broker
    publishMsg.transportField_flags().field_dup().setBitValue_bit(true);
    unitTestReceiveMessage(client, publishMsg);  

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo2 = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo2.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo2.m_data, Data);
    TS_ASSERT_EQUALS(msgInfo2.m_qos, CC_Mqtt311QoS_AtLeastOnceDelivery);
    unitTestPopReceivedMessageInfo();        

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Puback);    
    pubackMsg = dynamic_cast<UnitTestPubackMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubackMsg, nullptr);
    TS_ASSERT_EQUALS(pubackMsg->field_packetId().value(), PacketId);
}

void UnitTestReceive::test13()
{
    // Double reception of the same Qos2 message after ack

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    unitTestPopReceivedMessageInfo();    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 1000);
    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    auto* pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
    TS_ASSERT_EQUALS(pubcompMsg->field_packetId().value(), PacketId);

    // Receive it again
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo2 = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo2.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo2.m_data, Data);
    unitTestPopReceivedMessageInfo();

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 1000);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
    TS_ASSERT_EQUALS(pubcompMsg->field_packetId().value(), PacketId);
}

void UnitTestReceive::test14()
{
    // Testing resuming reception of the PUBLISH (QoS2) after reconnection.
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    unitTestPopReceivedMessageInfo();

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 100);
    apiNotifyNetworkDisconnected(client);
    TS_ASSERT(!unitTestHasDisconnectInfo());
    TS_ASSERT(unitTestCheckNoTicks()); // has session expiry

    unitTestClearState();

    // Reconnection with attempt to restore the session
    auto connectConfig = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&connectConfig);

    connectConfig.m_clientId = __FUNCTION__;
    connectConfig.m_cleanSession = false;

    auto connectRespConfig = UnitTestConnectResponseConfig();
    connectRespConfig.m_sessionPresent = true;
    unitTestPerformConnect(client, &connectConfig, nullptr, &connectRespConfig);

    unitTestTick(client, 100);
    publishMsg.transportField_flags().field_dup().setBitValue_bit(true);
    unitTestReceiveMessage(client, publishMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);    

    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    auto* pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
    TS_ASSERT_EQUALS(pubcompMsg->field_packetId().value(), PacketId);

    TS_ASSERT(!unitTestHasMessageRecieved());
}

void UnitTestReceive::test15()
{
    // Testing resuming reception of the PUBLISH (QoS2) after reconnection, assuming PUBREC was received by the broker
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    unitTestPopReceivedMessageInfo();    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 100);
    apiNotifyNetworkDisconnected(client);
    TS_ASSERT(!unitTestHasDisconnectInfo());
    TS_ASSERT(!unitTestIsPublishComplete());
    TS_ASSERT(unitTestCheckNoTicks());

    unitTestClearState();

    // Reconnection with attempt to restore the session
    auto connectConfig = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&connectConfig);

    connectConfig.m_clientId = __FUNCTION__;
    connectConfig.m_cleanSession = false;

    auto connectRespConfig = UnitTestConnectResponseConfig();
    connectRespConfig.m_sessionPresent = true;
    unitTestPerformConnect(client, &connectConfig, nullptr, &connectRespConfig);

    unitTestTick(client, 100);

    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    auto* pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
    TS_ASSERT_EQUALS(pubcompMsg->field_packetId().value(), PacketId);

    TS_ASSERT(!unitTestHasMessageRecieved());
}

void UnitTestReceive::test16()
{
    // Testing discarding reseption of the PUBLISH (QoS2) after reconnection without session present.
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    unitTestPopReceivedMessageInfo();    

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    auto* pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);

    unitTestTick(client, 100);
    apiNotifyNetworkDisconnected(client);
    TS_ASSERT(!unitTestHasDisconnectInfo());
    TS_ASSERT(unitTestCheckNoTicks()); 

    unitTestClearState();

    // Reconnection with attempt to restore the session
    unitTestPerformBasicConnect(client, __FUNCTION__, false);

    unitTestPerformBasicSubscribe(client, "#");
    unitTestTick(client, 1000);

    // Resending the same publish without DUP, expected to be accepted (due to clean session)
    unitTestTick(client, 100);
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo2 = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo2.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo2.m_data, Data);
    unitTestPopReceivedMessageInfo();     

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubrec);    
    pubrecMsg = dynamic_cast<UnitTestPubrecMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubrecMsg, nullptr);
    TS_ASSERT_EQUALS(pubrecMsg->field_packetId().value(), PacketId);    

    UnitTestPubrelMsg pubrelMsg;
    pubrelMsg.field_packetId().setValue(PacketId);
    unitTestReceiveMessage(client, pubrelMsg);

    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pubcomp);    
    auto* pubcompMsg = dynamic_cast<UnitTestPubcompMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(pubcompMsg, nullptr);
    TS_ASSERT_EQUALS(pubcompMsg->field_packetId().value(), PacketId);
}

void UnitTestReceive::test17()
{
    // Testing allowing non-clean first connect when subscription verification is disabled
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    apiSetVerifyIncomingMsgSubscribed(client, false);

    auto connectConfig = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&connectConfig);
    connectConfig.m_clientId = __FUNCTION__;
    connectConfig.m_cleanSession = false;

    auto connectRespConfig = UnitTestConnectResponseConfig();
    connectRespConfig.m_sessionPresent = true;
    unitTestPerformConnect(client, &connectConfig, nullptr, &connectRespConfig);        

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::AtMostOnceDelivery;
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    unitTestPopReceivedMessageInfo();
    TS_ASSERT(!unitTestHasMessageRecieved());
}