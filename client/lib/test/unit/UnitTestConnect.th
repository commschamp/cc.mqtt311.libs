#include "UnitTestDefaultBase.h"
#include "UnitTestProtocolDefs.h"

#include <cxxtest/TestSuite.h>

class UnitTestConnect : public CxxTest::TestSuite, public UnitTestDefaultBase
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }
};

void UnitTestConnect::test1()
{
    // Simple connect and ack
    
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT_DIFFERS(client, nullptr);
    TS_ASSERT(unitTestCheckNoTicks());
    TS_ASSERT(!apiIsConnected(client));

    auto* connect = apiConnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);

    auto connectConfig = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&connectConfig);

    const std::string ClientId("bla");
    const unsigned KeepAlive = 50;
    connectConfig.m_clientId = ClientId.c_str();
    connectConfig.m_keepAlive = KeepAlive;
    connectConfig.m_cleanSession = true;
    auto ec = apiConnectConfig(connect, &connectConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    ec = unitTestSendConnect(connect);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Connect);
    auto* connectMsg = dynamic_cast<UnitTestConnectMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(connectMsg, nullptr);
    TS_ASSERT_EQUALS(connectMsg->field_protocolName().value(), "MQTT");
    TS_ASSERT_EQUALS(connectMsg->field_protocolLevel().value(), 4U);
    TS_ASSERT(!connectMsg->field_flags().field_low().getBitValue_willFlag());
    TS_ASSERT_EQUALS(connectMsg->field_flags().field_willQos().value(), UnitTestConnectMsg::Field_flags::Field_willQos::ValueType::AtMostOnceDelivery);
    TS_ASSERT(!connectMsg->field_flags().field_high().getBitValue_willRetain());
    TS_ASSERT(!connectMsg->field_flags().field_high().getBitValue_userNameFlag());
    TS_ASSERT(!connectMsg->field_flags().field_high().getBitValue_passwordFlag());
    TS_ASSERT_EQUALS(connectMsg->field_clientId().value(), ClientId);
    TS_ASSERT_EQUALS(connectMsg->field_keepAlive().value(), KeepAlive);
    TS_ASSERT(connectMsg->field_flags().field_low().getBitValue_cleanSession());
    TS_ASSERT(connectMsg->field_willTopic().isMissing());
    TS_ASSERT(connectMsg->field_willMessage().isMissing());
    TS_ASSERT(connectMsg->field_userName().isMissing());
    TS_ASSERT(connectMsg->field_password().isMissing());
    TS_ASSERT(!unitTestIsConnectComplete());

    auto* tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, UnitTestDefaultOpTimeoutMs);

    unitTestTick(client, 1000);
    UnitTestConnackMsg connackMsg;
    connackMsg.field_returnCode().value() = UnitTestConnackMsg::Field_returnCode::ValueType::Accepted;
    unitTestReceiveMessage(client, connackMsg);
    TS_ASSERT(unitTestIsConnectComplete());

    auto& connectInfo = unitTestConnectResponseInfo();
    TS_ASSERT_EQUALS(connectInfo.m_status, CC_Mqtt311AsyncOpStatus_Complete);
    TS_ASSERT_EQUALS(connectInfo.m_response.m_returnCode, CC_Mqtt311ConnectReturnCode_Accepted);
    TS_ASSERT(!connectInfo.m_response.m_sessionPresent);
    unitTestPopConnectResponseInfo();

    tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, KeepAlive * 1000);
}

void UnitTestConnect::test2()
{
    // Testing connect will
    auto clientPtr = apiAllocClient(true);
    auto* client = clientPtr.get();
    TS_ASSERT_DIFFERS(client, nullptr);
    TS_ASSERT(unitTestCheckNoTicks());

    auto* connect = apiConnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);

    auto connectConfig = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&connectConfig);

    const std::string ClientId("bla");
    const std::string Username("username");
    const std::vector<std::uint8_t> Password = {0, 1, 2, 3, 4, 5};
    const unsigned KeepAlive = 50;
    connectConfig.m_clientId = ClientId.c_str();
    connectConfig.m_username = Username.c_str();
    connectConfig.m_password = &Password[0];
    connectConfig.m_passwordLen = static_cast<decltype(connectConfig.m_passwordLen)>(Password.size());
    connectConfig.m_keepAlive = KeepAlive;
    connectConfig.m_cleanSession = true;
    auto ec = apiConnectConfig(connect, &connectConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    const std::string WillTopic = "/will/topic";
    const std::vector<std::uint8_t> WillData = {1, 2, 3, 4, 5, 6, 7};
    const CC_Mqtt311QoS WillQos = CC_Mqtt311QoS_AtLeastOnceDelivery;
    const bool WillRetain = true;

    auto connectWillConfig = CC_Mqtt311ConnectWillConfig();
    apiConnectInitConfigWill(&connectWillConfig);

    connectWillConfig.m_topic = WillTopic.c_str();
    connectWillConfig.m_data = &WillData[0];
    connectWillConfig.m_dataLen = static_cast<decltype(connectWillConfig.m_dataLen)>(WillData.size());
    connectWillConfig.m_qos = WillQos;
    connectWillConfig.m_retain = WillRetain;    

    ec = apiConnectConfigWill(connect, &connectWillConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    ec = unitTestSendConnect(connect);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Connect);
    auto* connectMsg = dynamic_cast<UnitTestConnectMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(connectMsg, nullptr);
    TS_ASSERT_EQUALS(connectMsg->field_clientId().value(), ClientId);
    TS_ASSERT(connectMsg->field_flags().field_low().getBitValue_cleanSession());
    TS_ASSERT(connectMsg->field_flags().field_low().getBitValue_willFlag());
    TS_ASSERT_EQUALS(static_cast<CC_Mqtt311QoS>(connectMsg->field_flags().field_willQos().value()), WillQos);
    TS_ASSERT(connectMsg->field_flags().field_high().getBitValue_userNameFlag());
    TS_ASSERT(connectMsg->field_flags().field_high().getBitValue_passwordFlag());
    TS_ASSERT_EQUALS(connectMsg->field_keepAlive().value(), KeepAlive);
    TS_ASSERT(connectMsg->field_willTopic().doesExist());
    TS_ASSERT_EQUALS(connectMsg->field_willTopic().field().value(), WillTopic);
    TS_ASSERT(connectMsg->field_willMessage().doesExist());
    TS_ASSERT_EQUALS(connectMsg->field_willMessage().field().value(), WillData);
    TS_ASSERT(connectMsg->field_userName().doesExist());
    TS_ASSERT_EQUALS(connectMsg->field_userName().field().value(), Username);
    TS_ASSERT(connectMsg->field_password().doesExist());
    TS_ASSERT_EQUALS(connectMsg->field_password().field().value(), Password);

    unitTestTick(client, 1000);
    UnitTestConnackMsg connackMsg;
    connackMsg.field_flags().setBitValue_sp(false);
    connackMsg.field_returnCode().value() = UnitTestConnackMsg::Field_returnCode::ValueType::Accepted;
    unitTestReceiveMessage(client, connackMsg);

    TS_ASSERT(unitTestIsConnectComplete())
    auto& connectInfo = unitTestConnectResponseInfo();
    TS_ASSERT_EQUALS(connectInfo.m_status, CC_Mqtt311AsyncOpStatus_Complete);
    TS_ASSERT_EQUALS(connectInfo.m_response.m_returnCode, CC_Mqtt311ConnectReturnCode_Accepted);
    TS_ASSERT(!connectInfo.m_response.m_sessionPresent);
    unitTestPopConnectResponseInfo();

    auto* tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, KeepAlive * 1000);
}

void UnitTestConnect::test3()
{
    // Keep alive test
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    auto* connect = apiConnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);

    auto connectConfig = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&connectConfig);

    const std::string ClientId("bla");
    const unsigned KeepAlive = 30;
    connectConfig.m_clientId = ClientId.c_str();
    connectConfig.m_keepAlive = KeepAlive;
    connectConfig.m_cleanSession = true;
    auto ec = apiConnectConfig(connect, &connectConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    ec = unitTestSendConnect(connect);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Connect);

    auto* tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, UnitTestDefaultOpTimeoutMs);

    unitTestTick(client, 1000);
    UnitTestConnackMsg connackMsg;
    connackMsg.field_returnCode().value() = UnitTestConnackMsg::Field_returnCode::ValueType::Accepted;
    unitTestReceiveMessage(client, connackMsg);
    TS_ASSERT(unitTestIsConnectComplete());

    auto& connectInfo = unitTestConnectResponseInfo();
    TS_ASSERT_EQUALS(connectInfo.m_status, CC_Mqtt311AsyncOpStatus_Complete);
    TS_ASSERT_EQUALS(connectInfo.m_response.m_returnCode, CC_Mqtt311ConnectReturnCode_Accepted);
    unitTestPopConnectResponseInfo();

    tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, KeepAlive * 1000);

    TS_ASSERT(!unitTestHasDisconnectInfo());

    unitTestTick(client);
    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pingreq);
    TS_ASSERT(!unitTestHasDisconnectInfo());

    const unsigned PingDelay = 1000;
    unitTestTick(client, PingDelay);
    UnitTestPingrespMsg pingrespMsg;
    unitTestReceiveMessage(client, pingrespMsg);

    tickReq = unitTestTickReq();
    TS_ASSERT_EQUALS(tickReq->m_requested, KeepAlive * 1000 - PingDelay);

    // New ping is expected
    unitTestTick(client);
    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pingreq);
    TS_ASSERT(!unitTestHasDisconnectInfo());

    // No ping response
    unitTestTick(client); // 1000
    TS_ASSERT(!unitTestHasSentMessage());
    unitTestTick(client);
    TS_ASSERT(unitTestHasDisconnectInfo());
    auto& disconnectInfo = unitTestDisconnectInfo();
    TS_ASSERT_EQUALS(disconnectInfo.m_reason, CC_Mqtt311BrokerDisconnectReason_NoBrokerResponse);
}

void UnitTestConnect::test4()
{
    // Testing inability to send any message before CONNECT.
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    auto ec = CC_Mqtt311ErrorCode_ValuesLimit;
    auto* disconnect = apiDisconnectPrepare(client, &ec);
    TS_ASSERT_EQUALS(disconnect, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_NotConnected);

    auto* subscribe = apiSubscribePrepare(client, &ec);    
    TS_ASSERT_EQUALS(subscribe, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_NotConnected);

    auto* unsubscribe = apiUnsubscribePrepare(client, &ec);    
    TS_ASSERT_EQUALS(unsubscribe, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_NotConnected);    

    auto* publish = apiPublishPrepare(client, &ec);    
    TS_ASSERT_EQUALS(publish, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_NotConnected);        
}

void UnitTestConnect::test5()
{
    // Testing attempt to send connect message second time

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT(!apiIsConnected(client));

    const std::string ClientId(__FUNCTION__);
    unitTestPerformBasicConnect(client, ClientId.c_str());

    // Second connection attempt
    auto ec = CC_Mqtt311ErrorCode_ValuesLimit;
    auto* connect = apiConnectPrepare(client, &ec);
    TS_ASSERT_EQUALS(connect, nullptr);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_AlreadyConnected);        
}

void UnitTestConnect::test6()
{
    // Testing rejection of the non "clean session" on the first attempt to connect

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT(!apiIsConnected(client));

    auto* connect = apiConnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);
    
    auto config = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&config);

    config.m_clientId = __FUNCTION__;

    auto ec = apiConnectConfig(connect, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_BadParam);
}

void UnitTestConnect::test7()
{
    // Testing invalid will Qos

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT(!apiIsConnected(client));

    auto* connect = apiConnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);
    
    auto config = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&config);

    config.m_clientId = __FUNCTION__;
    config.m_cleanSession = true;

    auto ec = apiConnectConfig(connect, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    auto willConfig = CC_Mqtt311ConnectWillConfig();
    apiConnectInitConfigWill(&willConfig);

    const UnitTestData WillData = {0x1, 0x2, 0x3};
    willConfig.m_topic = "will/topic";
    willConfig.m_data = &WillData[0];
    willConfig.m_dataLen = static_cast<decltype(willConfig.m_dataLen)>(WillData.size());
    willConfig.m_qos = static_cast<decltype(willConfig.m_qos)>(3);
    ec = apiConnectConfigWill(connect, &willConfig);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_BadParam);
}

void UnitTestConnect::test8()
{
    // Testing network disconnection during connect

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT(!apiIsConnected(client));

    auto* connect = apiConnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);
    
    auto config = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&config);

    config.m_clientId = __FUNCTION__;
    config.m_cleanSession = true;

    auto ec = apiConnectConfig(connect, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    ec = unitTestSendConnect(connect);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Connect);

    unitTestTick(client, 1000);
    apiNotifyNetworkDisconnected(client);

    TS_ASSERT(unitTestIsConnectComplete());
    auto& connackInfo = unitTestConnectResponseInfo();
    TS_ASSERT_EQUALS(connackInfo.m_status, CC_Mqtt311AsyncOpStatus_BrokerDisconnected);
    TS_ASSERT(!apiIsConnected(client));
}

void UnitTestConnect::test9()
{
    // Testing rejection of connection with "Client ID is rejected"

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    auto config = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&config);
    config.m_cleanSession = true;

    auto* connect = apiConnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);

    auto ec = apiConnectConfig(connect, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    ec = unitTestSendConnect(connect);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Connect);
    auto* connectMsg = dynamic_cast<UnitTestConnectMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(connectMsg, nullptr);
    TS_ASSERT(connectMsg->field_clientId().value().empty());

    unitTestTick(client, 1000);
    UnitTestConnackMsg connackMsg;
    connackMsg.field_returnCode().value() = UnitTestConnackMsg::Field_returnCode::ValueType::IdentifierRejected;
    unitTestReceiveMessage(client, connackMsg);
    TS_ASSERT(unitTestIsConnectComplete());

    auto& connectInfo = unitTestConnectResponseInfo();
    TS_ASSERT_EQUALS(connectInfo.m_status, CC_Mqtt311AsyncOpStatus_Complete);
    TS_ASSERT_EQUALS(connectInfo.m_response.m_returnCode, CC_Mqtt311ConnectReturnCode_IdRejected);
    unitTestPopConnectResponseInfo();

    TS_ASSERT(!apiIsConnected(client));
}

void UnitTestConnect::test10()
{
    // Testing network disconnection after rejecting connect

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    auto config = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&config);
    config.m_clientId = __FUNCTION__;
    config.m_cleanSession = true;

    auto* connect = apiConnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);

    auto ec = apiConnectConfig(connect, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    ec = unitTestSendConnect(connect);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Connect);
    auto* connectMsg = dynamic_cast<UnitTestConnectMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(connectMsg, nullptr);

    unitTestTick(client, 1000);
    UnitTestConnackMsg connackMsg;
    connackMsg.field_returnCode().value() = UnitTestConnackMsg::Field_returnCode::ValueType::ServerUnavailable;
    unitTestReceiveMessage(client, connackMsg);
    TS_ASSERT(unitTestIsConnectComplete());

    auto& connectInfo = unitTestConnectResponseInfo();
    TS_ASSERT_EQUALS(connectInfo.m_status, CC_Mqtt311AsyncOpStatus_Complete);
    TS_ASSERT_EQUALS(connectInfo.m_response.m_returnCode, CC_Mqtt311ConnectReturnCode_ServerUnavailable);
    unitTestPopConnectResponseInfo();

    TS_ASSERT(!apiIsConnected(client));

    TS_ASSERT(unitTestCheckNoTicks());
    apiNotifyNetworkDisconnected(client); 
}

void UnitTestConnect::test11()
{
    // Testing reception of the session present when clean was requested

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    auto config = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&config);
    config.m_clientId = __FUNCTION__;
    config.m_cleanSession = true;

    auto* connect = apiConnectPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(connect, nullptr);

    auto ec = apiConnectConfig(connect, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    ec = unitTestSendConnect(connect);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Connect);
    auto* connectMsg = dynamic_cast<UnitTestConnectMsg*>(sentMsg.get());
    TS_ASSERT_DIFFERS(connectMsg, nullptr);

    unitTestTick(client, 1000);
    UnitTestConnackMsg connackMsg;
    connackMsg.field_returnCode().value() = UnitTestConnackMsg::Field_returnCode::ValueType::Accepted;
    connackMsg.field_flags().setBitValue_sp(true);
    unitTestReceiveMessage(client, connackMsg);
    TS_ASSERT(unitTestIsConnectComplete());

    auto& connectInfo = unitTestConnectResponseInfo();
    TS_ASSERT_EQUALS(connectInfo.m_status, CC_Mqtt311AsyncOpStatus_ProtocolError);
    unitTestPopConnectResponseInfo();

    TS_ASSERT(!apiIsConnected(client));
}

void UnitTestConnect::test12()
{
    // Testing cleared subscription when clean state is reported.

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    unitTestPerformBasicSubscribe(client, "#");

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};

    UnitTestPublishMsg publishMsg;
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasMessageRecieved());
    auto& msgInfo = unitTestReceivedMessageInfo();
    TS_ASSERT_EQUALS(msgInfo.m_topic, Topic);
    TS_ASSERT_EQUALS(msgInfo.m_data, Data);
    unitTestPopReceivedMessageInfo();    

    unitTestTick(client, 1000);
    unitTestPerformDisconnect(client);

    TS_ASSERT(unitTestCheckNoTicks());

    unitTestClearState();

    // Reconnecting requesting non clean start, while broker reports session is not present
    unitTestPerformBasicConnect(client, __FUNCTION__, false);

    // Publish message is expected to be ignored
    unitTestReceiveMessage(client, publishMsg);
    TS_ASSERT(!unitTestHasMessageRecieved());
}

void UnitTestConnect::test13()
{
    // Testing rejecting CONNACK with network disconnection

    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();

    auto config = CC_Mqtt311ConnectConfig();
    apiConnectInitConfig(&config);
    config.m_clientId = __FUNCTION__;
    config.m_cleanSession = true;

    UnitTestConnectResponseConfig responseConfig;
    responseConfig.m_returnCode = CC_Mqtt311ConnectReturnCode_NotAuthorized;

    unitTestPerformConnect(client, &config, nullptr, &responseConfig);
    TS_ASSERT(!apiIsConnected(client));
    TS_ASSERT(!apiIsNetworkDisconnected(client));
    apiNotifyNetworkDisconnected(client);
    TS_ASSERT(apiIsNetworkDisconnected(client));
}

void UnitTestConnect::test14()
{
    // Extra keep alive testing
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    TS_ASSERT_DIFFERS(client, nullptr);
    TS_ASSERT(unitTestCheckNoTicks());

    unitTestPerformBasicConnect(client, __FUNCTION__);

    auto* tickReq = unitTestTickReq();
    TS_ASSERT_DIFFERS(tickReq, nullptr);
    TS_ASSERT_EQUALS(tickReq->m_requested, UnitTestDefaultKeepAliveMs);    

    unitTestTick(client);
    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pingreq);
    TS_ASSERT(!unitTestHasDisconnectInfo()); 

    tickReq = unitTestTickReq();
    TS_ASSERT_DIFFERS(tickReq, nullptr);
    TS_ASSERT_EQUALS(tickReq->m_requested, UnitTestDefaultOpTimeoutMs);    

    const unsigned PingDelay = 1;
    unitTestTick(client, PingDelay);
    UnitTestPingrespMsg pingrespMsg;
    unitTestReceiveMessage(client, pingrespMsg);

    tickReq = unitTestTickReq();
    auto nextTickMs = UnitTestDefaultKeepAliveMs - PingDelay;
    TS_ASSERT_EQUALS(tickReq->m_requested, nextTickMs);   

    unitTestTick(client);
    sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
    TS_ASSERT_EQUALS(sentMsg->getId(), cc_mqtt311::MsgId_Pingreq);
    TS_ASSERT(!unitTestHasDisconnectInfo());  

    tickReq = unitTestTickReq();
    TS_ASSERT_DIFFERS(tickReq, nullptr);
    TS_ASSERT_EQUALS(tickReq->m_requested, PingDelay);   

    unitTestTick(client, PingDelay);
    TS_ASSERT(!unitTestHasSentMessage());
    unitTestReceiveMessage(client, pingrespMsg);     
    tickReq = unitTestTickReq();
    TS_ASSERT_DIFFERS(tickReq, nullptr);
    TS_ASSERT_EQUALS(tickReq->m_requested, nextTickMs);    

    unitTestTick(client, 6000);
    unitTestPerformDisconnect(client);
    TS_ASSERT(unitTestCheckNoTicks());

    unitTestClearState();
    unitTestPerformBasicConnect(client, __FUNCTION__);

    tickReq = unitTestTickReq();
    TS_ASSERT_DIFFERS(tickReq, nullptr);
    TS_ASSERT_EQUALS(tickReq->m_requested, UnitTestDefaultKeepAliveMs);    
}