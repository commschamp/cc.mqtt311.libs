#include "UnitTestQos0Base.h"
#include "UnitTestProtocolDefs.h"

#include <cxxtest/TestSuite.h>

class UnitTestQos0Receive : public CxxTest::TestSuite, public UnitTestQos0Base
{
public:
    void test1();
    void test2();

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }
};

void UnitTestQos0Receive::test1()
{
    // Rejection QoS2 reception
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));    

    auto subscribeConfig = CC_Mqtt311SubscribeTopicConfig();
    apiSubscribeInitConfigTopic(&subscribeConfig);
    subscribeConfig.m_topic = "#";
    subscribeConfig.m_maxQos = CC_Mqtt311QoS_AtMostOnceDelivery;

    unitTestPerformSubscribe(client, &subscribeConfig);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::ExactlyOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;

    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasDisconnectInfo());      
    auto& disconnectInfo = unitTestDisconnectInfo();
    TS_ASSERT_EQUALS(disconnectInfo.m_reason, CC_Mqtt311BrokerDisconnectReason_ProtocolError);
    unitTestPopDisconnectInfo();       
}

void UnitTestQos0Receive::test2()
{
    // Rejection QoS1 reception
    auto clientPtr = apiAllocClient();
    auto* client = clientPtr.get();
    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));    

    auto subscribeConfig = CC_Mqtt311SubscribeTopicConfig();
    apiSubscribeInitConfigTopic(&subscribeConfig);
    subscribeConfig.m_topic = "#";
    subscribeConfig.m_maxQos = CC_Mqtt311QoS_AtMostOnceDelivery;

    unitTestPerformSubscribe(client, &subscribeConfig);

    const std::string Topic = "some/topic";
    const UnitTestData Data = {'h', 'e', 'l', 'l', 'o'};
    const unsigned PacketId = 10;

    UnitTestPublishMsg publishMsg;
    publishMsg.transportField_flags().field_qos().value() = UnitTestPublishMsg::TransportField_flags::Field_qos::ValueType::AtLeastOnceDelivery;
    publishMsg.field_packetId().field().setValue(PacketId);
    publishMsg.field_topic().value() = Topic;
    publishMsg.field_payload().value() = Data;

    publishMsg.doRefresh();
    unitTestReceiveMessage(client, publishMsg);

    TS_ASSERT(unitTestHasDisconnectInfo());      
    auto& disconnectInfo = unitTestDisconnectInfo();
    TS_ASSERT_EQUALS(disconnectInfo.m_reason, CC_Mqtt311BrokerDisconnectReason_ProtocolError);
    unitTestPopDisconnectInfo();      
}