#include "UnitTestBmBase.h"
#include "UnitTestProtocolDefs.h"

#include <cxxtest/TestSuite.h>

class UnitTestBmPublish : public CxxTest::TestSuite, public UnitTestBmBase
{
public:
    void test1();

private:
    virtual void setUp() override
    {
        unitTestSetUp();
    }

    virtual void tearDown() override
    {
        unitTestTearDown();
    }
};

void UnitTestBmPublish::test1()
{
    // Qos0 publish
    auto clientPtr = apiAllocClient(true);
    auto* client = clientPtr.get();

    unitTestPerformBasicConnect(client, __FUNCTION__);
    TS_ASSERT(apiIsConnected(client));    

    const std::string Topic("some/topic");
    auto* publish = apiPublishPrepare(client, nullptr);
    TS_ASSERT_DIFFERS(publish, nullptr);

    const UnitTestData Data = { 0x1, 0x2, 0x3, 0x4, 0x5};
    const CC_Mqtt311QoS Qos = CC_Mqtt311QoS_AtMostOnceDelivery;
    const bool Retain = true;

    auto config = CC_Mqtt311PublishConfig();
    apiPublishInitConfig(&config);

    config.m_topic = Topic.c_str();
    config.m_data = &Data[0];
    config.m_dataLen = static_cast<decltype(config.m_dataLen)>(Data.size());
    config.m_qos = Qos;
    config.m_retain = Retain;

    auto ec = apiPublishConfig(publish, &config);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    ec = unitTestSendPublish(publish);
    TS_ASSERT_EQUALS(ec, CC_Mqtt311ErrorCode_Success);

    TS_ASSERT(unitTestIsPublishComplete());
    auto& pubackInfo = unitTestPublishResponseInfo();
    TS_ASSERT_EQUALS(pubackInfo.m_status, CC_Mqtt311AsyncOpStatus_Complete);
    unitTestPopPublishResponseInfo();

    auto sentMsg = unitTestGetSentMessage();
    TS_ASSERT(sentMsg);
}
