#pragma once

#include "cc_mqtt311/options/ClientDefaultOptions.h"
#include "cc_mqtt311/Version.h"

#include <tuple>

namespace cc_mqtt311_client
{

class ProtocolOptions : public cc_mqtt311::options::ClientDefaultOptions
{
    using BaseImpl = cc_mqtt311::options::ClientDefaultOptions;

public:
    struct field : public BaseImpl::field
    {
        using BinData = 
            std::tuple<
                ##FIELD_BIN_DATA##,
                BaseImpl::field::BinData
            >;

        using ProtocolName = 
            std::tuple<
                ##FIELD_PROTOCOL_NAME##,
                BaseImpl::field::ProtocolName
            >;

        using String = 
            std::tuple<
                ##FIELD_STRING##,
                BaseImpl::field::String
            >;

        using Topic = 
            std::tuple<
                ##FIELD_TOPIC##,
                BaseImpl::field::Topic
            >;

    }; // struct field   

    struct message : public BaseImpl::message
    {

        struct ConnectFields : public BaseImpl::message::ConnectFields
        {
            // using Properties = comms::option::EmptyOption;

            using ClientId = 
                std::tuple<
                    ##MESSAGE_CONNECT_FIELDS_CLIENT_ID##,
                    BaseImpl::message::ConnectFields::ClientId
                >;

            //struct WillPropertiesMembers
            //{
            //    using ActWillProperties = comms::option::EmptyOption;
            //}; // struct WillPropertiesMembers

            struct WillTopicMembers : public BaseImpl::message::ConnectFields::WillTopicMembers
            {
                using WillTopic = 
                    std::tuple<
                        ##MESSAGE_CONNECT_FIELDS_WILL_TOPIC##,
                        BaseImpl::message::ConnectFields::WillTopicMembers::WillTopic
                    >;
            }; // struct WillTopicMembers

            //struct WillMessageMembers
            //{
            //    using WillMessage = comms::option::EmptyOption;
            //}; // struct WillMessageMembers

            struct UserNameMembers : public BaseImpl::message::ConnectFields::UserNameMembers
            {
                using UserName = 
                    std::tuple<
                        ##MESSAGE_CONNECT_FIELDS_USERNAME##,
                        BaseImpl::message::ConnectFields::UserNameMembers::UserName
                    >;
            }; // struct UserNameMembers

            struct PasswordMembers : public BaseImpl::message::ConnectFields::PasswordMembers
            {
                using Password = 
                    std::tuple<
                        ##MESSAGE_CONNECT_FIELDS_PASSWORD##,
                        BaseImpl::message::ConnectFields::PasswordMembers::Password
                    >;
            }; // struct PasswordMembers
        };

        struct SubscribeFields : public BaseImpl::message::SubscribeFields
        {
            using List =
                std::tuple<
                    ##MESSAGE_SUBSCRIBE_FIELDS_LIST##,
                    BaseImpl::message::SubscribeFields::List
                >;
        }; // struct SubscribeFields

        struct SubackFields : public BaseImpl::message::SubackFields
        {
            using List =
                std::tuple<
                    ##MESSAGE_SUBSCRIBE_FIELDS_LIST##,
                    BaseImpl::message::SubackFields::List
                >;
        }; // struct SubackFields        

        struct UnsubscribeFields : public BaseImpl::message::UnsubscribeFields
        {
            using List =
                std::tuple<
                    ##MESSAGE_UNSUBSCRIBE_FIELDS_LIST##,
                    BaseImpl::message::UnsubscribeFields::List
                >;
        }; // struct UnsubscribeFields

    }; // struct message
    
    struct frame : public BaseImpl::frame
    {
        struct FrameLayers : public BaseImpl::frame::FrameLayers
        {
            struct DataMembers : public BaseImpl::frame::FrameLayers::DataMembers
            {
                using Field =
                    std::tuple<
                        ##MAX_PACKET_SIZE##,
                        BaseImpl::frame::FrameLayers::DataMembers::Field
                    >;
            }; // struct DataMembers

            using IdAndFlags =
                std::tuple<
                    ##MSG_ALLOC_OPT##,
                    BaseImpl::frame::FrameLayers::IdAndFlags
                >;
        }; // struct FrameLayers
    }; // struct frame     
};

} // namespace cc_mqtt311_client
